# version: "3.8"

# services:
#   # PostgreSQL Database
#   postgres:
#     image: postgres:15-alpine
#     container_name: graduate_project_postgres
#     environment:
#       POSTGRES_DB: graduate_project
#       POSTGRES_USER: postgres
#       POSTGRES_PASSWORD: postgres123
#     ports:
#       - "5432:5432"
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#       - ./backend/migrations:/docker-entrypoint-initdb.d
#     networks:
#       - app-network
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U postgres"]
#       interval: 30s
#       timeout: 10s
#       retries: 3

#   # Redis for caching and sessions
#   redis:
#     image: redis:7-alpine
#     container_name: graduate_project_redis
#     ports:
#       - "6379:6379"
#     volumes:
#       - redis_data:/data
#     networks:
#       - app-network
#     healthcheck:
#       test: ["CMD", "redis-cli", "ping"]
#       interval: 30s
#       timeout: 10s
#       retries: 3

#   # Zookeeper for Kafka
#   zookeeper:
#     image: confluentinc/cp-zookeeper:latest
#     container_name: graduate_project_zookeeper
#     environment:
#       ZOOKEEPER_CLIENT_PORT: 2181
#       ZOOKEEPER_TICK_TIME: 2000
#     networks:
#       - app-network

#   # Kafka
#   kafka:
#     image: confluentinc/cp-kafka:latest
#     container_name: graduate_project_kafka
#     depends_on:
#       - zookeeper
#     ports:
#       - "9092:9092"
#       - "29092:29092"
#     environment:
#       KAFKA_BROKER_ID: 1
#       KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#       KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_HOST://localhost:29092
#       KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#       KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
#       KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#       KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
#     networks:
#       - app-network
#     healthcheck:
#       test:
#         [
#           "CMD",
#           "kafka-broker-api-versions",
#           "--bootstrap-server",
#           "localhost:9092",
#         ]
#       interval: 30s
#       timeout: 10s
#       retries: 3

#   # Backend Service
#   backend:
#     build:
#       context: ./backend
#       dockerfile: Dockerfile
#     container_name: graduate_project_backend
#     ports:
#       - "5000:5000"
#     environment:
#       NODE_ENV: production
#       DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/graduate_project
#       REDIS_URL: redis://redis:6379
#       KAFKA_BROKERS: kafka:9092
#       JWT_SECRET: your-jwt-secret-key
#       PORT: 5000
#     depends_on:
#       postgres:
#         condition: service_healthy
#       redis:
#         condition: service_healthy
#       kafka:
#         condition: service_healthy
#     volumes:
#       - ./backend/uploads:/app/uploads
#     networks:
#       - app-network
#     restart: unless-stopped

#   # Frontend Service
#   frontend:
#     build:
#       context: ./frontend
#       dockerfile: Dockerfile
#     container_name: graduate_project_frontend
#     ports:
#       - "3000:3000"
#     environment:
#       NODE_ENV: development
#       NEXT_PUBLIC_API_URL: http://localhost:5000
#       NEXT_PUBLIC_SOCKET_URL: http://localhost:5000
#     depends_on:
#       - backend
#     networks:
#       - app-network
#     restart: unless-stopped

#   # Nginx Reverse Proxy
#   nginx:
#     image: nginx:alpine
#     container_name: graduate_project_nginx
#     ports:
#       - "80:80"
#       - "443:443"
#     volumes:
#       - ./nginx/nginx.conf:/etc/nginx/nginx.conf
#       - ./nginx/ssl:/etc/nginx/ssl
#     depends_on:
#       - frontend
#       - backend
#     networks:
#       - app-network
#     restart: unless-stopped

# volumes:
#   postgres_data:
#   redis_data:

# networks:
#   app-network:
#     driver: bridge

version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: graduate_project
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: quannguyen2002
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d graduate_project"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Zookeeper for Kafka
  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper_kafka
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Kafka (Improved configuration)
  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka1
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_CREATE_TOPICS: "order-status-updates:1:1,order-service:1:1, order-status-updates"
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_BYTES: 1073741824
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    volumes:
      - kafka_data:/kafka
    networks:
      - app-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "kafka-topics.sh --bootstrap-server localhost:9092 --list",
        ]
      interval: 30s
      timeout: 15s
      retries: 10
      start_period: 90s

  # Kafka UI for monitoring and management
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka_ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: graduate_project_cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_READONLY: false
      DYNAMIC_CONFIG_ENABLED: true
      KAFKA_CLUSTERS_0_AUDIT_TOPICAUDITENABLED: true
      KAFKA_CLUSTERS_0_AUDIT_CONSOLEAUDITENABLED: true
    networks:
      - app-network
    restart: unless-stopped

  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: development
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: quannguyen2002
      DB_NAME: graduate_project
      DATABASE_URL: postgresql://postgres:quannguyen2002@postgres:5432/graduate_project
      REDIS_URL: redis://redis:6379
      KAFKA_BROKERS: kafka:9092
      JWT_SECRET: your-jwt-secret-key-for-development
      PORT: 5000
      EMAIL_USER: hoangquan02072002@gmail.com
      EMAIL_PASS: enugjvoytlxleviw
      EMAIL_HOST: smtp.gmail.com
      EMAIL_PORT: 465
      EMAIL_SECURE: true
      WEB_HOOK_SECRET: whsec_171057203d3e3ca337c3cda24e378027e0aa0b881462af20b0fb60562d24355c
      MOMO_PARTNER_CODE: MOMO
      MOMO_ACCESS_KEY: F8BBA842ECF85
      MOMO_SECRET_KEY: K951B6PE1waDMi640xX08PD3vg6EkVlz
      MOMO_API_ENDPOINT: https://test-payment.momo.vn/v2/gateway/api/create
      MOMO_IPN_URL: https://webhook.site/b3088a6a-2d17-4f8d-a383-71389a6c600b
      MOMO_REDIRECT_URL: https://webhook.site/b3088a6a-2d17-4f8d-a383-71389a6c600b
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/src:/app/src
    networks:
      - app-network
    restart: unless-stopped

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:5000
      NEXT_PUBLIC_SOCKET_URL: http://localhost:5000
    depends_on:
      - backend
    volumes:
      - ./frontend/app:/app/app
      - ./frontend/components:/app/components
      - ./frontend/lib:/app/lib
      - ./frontend/utils:/app/utils
      - ./frontend/public:/app/public
      - ./frontend/redux:/app/redux
    networks:
      - app-network
    restart: unless-stopped

  # Redis Commander (Optional - Redis UI)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis_ui
    depends_on:
      - redis
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
      HTTP_USER: admin
      HTTP_PASSWORD: admin123
    networks:
      - app-network
    restart: unless-stopped

  # pgAdmin for PostgreSQL management (Optional)
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@graduate-project.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: "False"
    ports:
      - "5050:80"
    depends_on:
      - postgres
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  kafka_data:
  pgadmin_data:

networks:
  app-network:
    driver: bridge
